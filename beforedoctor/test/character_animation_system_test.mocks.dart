// Mocks generated by Mockito 5.4.6 from annotations
// in beforedoctor/test/character_animation_system_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:beforedoctor/core/services/character_interaction_engine.dart'
    as _i2;
import 'package:beforedoctor/core/services/lip_sync_service.dart' as _i7;
import 'package:beforedoctor/core/services/rive_animation_manager.dart' as _i5;
import 'package:logger/logger.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:rive/rive.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CharacterInteractionEngine].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterInteractionEngine extends _i1.Mock
    implements _i2.CharacterInteractionEngine {
  MockCharacterInteractionEngine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EmotionalTone get currentTone =>
      (super.noSuchMethod(
            Invocation.getter(#currentTone),
            returnValue: _i2.EmotionalTone.neutral,
          )
          as _i2.EmotionalTone);

  @override
  String get currentLanguage =>
      (super.noSuchMethod(
            Invocation.getter(#currentLanguage),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#currentLanguage),
            ),
          )
          as String);

  @override
  set onStateChanged(dynamic Function(String)? _onStateChanged) =>
      super.noSuchMethod(
        Invocation.setter(#onStateChanged, _onStateChanged),
        returnValueForMissingStub: null,
      );

  @override
  set onSpeakingProgress(dynamic Function(double)? _onSpeakingProgress) =>
      super.noSuchMethod(
        Invocation.setter(#onSpeakingProgress, _onSpeakingProgress),
        returnValueForMissingStub: null,
      );

  @override
  set onSpeakingComplete(dynamic Function()? _onSpeakingComplete) =>
      super.noSuchMethod(
        Invocation.setter(#onSpeakingComplete, _onSpeakingComplete),
        returnValueForMissingStub: null,
      );

  @override
  void setOnStateChange(dynamic Function(String)? callback) =>
      super.noSuchMethod(
        Invocation.method(#setOnStateChange, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  void setOnEmotionalToneChange(dynamic Function(String)? callback) =>
      super.noSuchMethod(
        Invocation.method(#setOnEmotionalToneChange, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setState(_i2.CharacterState? state) => super.noSuchMethod(
    Invocation.method(#setState, [state]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> changeState(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#changeState, [stateName]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setEmotionalTone(_i2.EmotionalTone? tone) => super.noSuchMethod(
    Invocation.method(#setEmotionalTone, [tone]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> changeEmotionalTone(String? toneName) =>
      (super.noSuchMethod(
            Invocation.method(#changeEmotionalTone, [toneName]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> setLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [languageCode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> speakWithAnimation(
    String? text, {
    _i2.EmotionalTone? tone,
    String? detectedLanguage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #speakWithAnimation,
              [text],
              {#tone: tone, #detectedLanguage: detectedLanguage},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void startListening() => super.noSuchMethod(
    Invocation.method(#startListening, []),
    returnValueForMissingStub: null,
  );

  @override
  void startThinking() => super.noSuchMethod(
    Invocation.method(#startThinking, []),
    returnValueForMissingStub: null,
  );

  @override
  void reactToSymptom(String? symptom) => super.noSuchMethod(
    Invocation.method(#reactToSymptom, [symptom]),
    returnValueForMissingStub: null,
  );

  @override
  String getLocalizedGreeting() =>
      (super.noSuchMethod(
            Invocation.method(#getLocalizedGreeting, []),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLocalizedGreeting, []),
            ),
          )
          as String);

  @override
  String getLocalizedSymptomPrompt() =>
      (super.noSuchMethod(
            Invocation.method(#getLocalizedSymptomPrompt, []),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getLocalizedSymptomPrompt, []),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RiveAnimationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRiveAnimationManager extends _i1.Mock
    implements _i5.RiveAnimationManager {
  MockRiveAnimationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i6.Artboard? getArtboard(String? animationName) =>
      (super.noSuchMethod(Invocation.method(#getArtboard, [animationName]))
          as _i6.Artboard?);

  @override
  _i6.StateMachineController? createController(String? animationName) =>
      (super.noSuchMethod(Invocation.method(#createController, [animationName]))
          as _i6.StateMachineController?);

  @override
  _i4.Future<void> playAnimation(String? animationName, {bool? loop = false}) =>
      (super.noSuchMethod(
            Invocation.method(#playAnimation, [animationName], {#loop: loop}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopCurrentAnimation() =>
      (super.noSuchMethod(
            Invocation.method(#stopCurrentAnimation, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> startLipSync() =>
      (super.noSuchMethod(
            Invocation.method(#startLipSync, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopLipSync() =>
      (super.noSuchMethod(
            Invocation.method(#stopLipSync, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LipSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLipSyncService extends _i1.Mock implements _i7.LipSyncService {
  MockLipSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSpeaking =>
      (super.noSuchMethod(Invocation.getter(#isSpeaking), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setPhonemeCallback(dynamic Function(String)? callback) =>
      super.noSuchMethod(
        Invocation.method(#setPhonemeCallback, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> speakWithLipSync(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#speakWithLipSync, [text]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopSpeaking() =>
      (super.noSuchMethod(
            Invocation.method(#stopSpeaking, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  String getPhonemeForCharacter(String? character) =>
      (super.noSuchMethod(
            Invocation.method(#getPhonemeForCharacter, [character]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#getPhonemeForCharacter, [character]),
            ),
          )
          as String);

  @override
  List<String> analyzeTextPhonemes(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#analyzeTextPhonemes, [text]),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i8.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> get init =>
      (super.noSuchMethod(
            Invocation.getter(#init),
            returnValue: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void v(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #v,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void t(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #t,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void d(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #d,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void i(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #i,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void w(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #w,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void e(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #e,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void wtf(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #wtf,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void f(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #f,
      [message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void log(
    _i8.Level? level,
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #log,
      [level, message],
      {#time: time, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  bool isClosed() =>
      (super.noSuchMethod(Invocation.method(#isClosed, []), returnValue: false)
          as bool);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
